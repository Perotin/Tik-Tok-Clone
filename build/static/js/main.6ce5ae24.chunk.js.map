{"version":3,"sources":["VideoFooter.js","VideoSidebar.js","Video.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","alt","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","Video","url","videoRef","useRef","playing","setPlaying","loop","current","pause","play","ref","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","videos","setVideos","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ce5ae24.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./VideoFooter.css\";\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport Ticker from \"react-ticker\";\r\n\r\nfunction VideoFooter({ channel, description, song }) {\r\n    return (\r\n        <div className=\"videoFooter\">\r\n          <div className=\"videoFooter__text\">\r\n            <h3>@{channel}</h3>\r\n            <p>{description}</p>\r\n            <div className=\"videoFooter__ticker\">\r\n            <MusicNoteIcon className=\"videoFooter__icon\"/>\r\n            <Ticker mode=\"smooth\"> \r\n            {({ index }) => (\r\n              <>\r\n                <p>{song}</p>\r\n              </>\r\n              )}\r\n            </Ticker> \r\n            </div>\r\n\r\n          </div>\r\n          <img className=\"videoFooter__record\" \r\n          src=\"https://static.thenounproject.com/png/934821-200.png\" alt=\"\"\r\n          />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoFooter\r\n","import React, { useState } from 'react'\r\nimport './videoSidebar.css'\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport MessageIcon from \"@material-ui/icons/Message\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\n\r\nfunction VideoSidebar({likes, shares, messages}) {\r\n    const [liked, setLiked] = useState(false);\r\n    return (\r\n        <div className=\"videoSidebar\">\r\n            <div className=\"videoSidebar__button\">\r\n                {liked ? (\r\n                    <FavoriteIcon fontSize=\"large\"\r\n                    onClick={(e) => setLiked(false)} />\r\n                ): (\r\n                    <FavoriteBorderIcon fontSize=\"large\"\r\n                    onClick={(e) => setLiked(true)}/>\r\n                )}\r\n                <p>{liked ? likes + 1 : likes}</p>\r\n            </div>\r\n\r\n            <div className=\"videoSidebar__button\">\r\n                <MessageIcon />\r\n                <p>{messages}</p>\r\n            </div>\r\n\r\n            <div className=\"videoSidebar__button\">\r\n                <ShareIcon />\r\n                <p>{shares}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoSidebar\r\n","import React, { useRef, useState } from 'react'\r\nimport VideoFooter from './VideoFooter';\r\nimport VideoSidebar from './VideoSidebar';\r\nimport './Video.css'\r\n\r\nfunction Video({\r\n    url,\r\n    channel,\r\n    description,\r\n    song,\r\n    likes,\r\n    messages,\r\n    shares\r\n}) {\r\n    const videoRef = useRef(null);\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const onVideoPress = () => {\r\n        if (playing) {\r\n            videoRef.current.pause();\r\n            setPlaying(false);\r\n        } else {\r\n        videoRef.current.play();\r\n        setPlaying(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"video\">\r\n\r\n            <video \r\n                className=\"video__player\" \r\n                loop\r\n                onClick={onVideoPress}\r\n                ref={videoRef}\r\n                src={url}\r\n                ></video>\r\n\r\n            <VideoFooter \r\n            channel={channel}\r\n            description={description} \r\n            song={song}/>\r\n\r\n            <VideoSidebar \r\n            likes={likes} \r\n            messages={messages} \r\n            shares={shares}/> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCPXz2OLkLPX7-QvCGNT6FAVjq2WRs2z0E\",\r\n    authDomain: \"tik-tok-clone-b3101.firebaseapp.com\",\r\n    databaseURL: \"https://tik-tok-clone-b3101.firebaseio.com\",\r\n    projectId: \"tik-tok-clone-b3101\",\r\n    storageBucket: \"tik-tok-clone-b3101.appspot.com\",\r\n    messagingSenderId: \"716676661934\",\r\n    appId: \"1:716676661934:web:c6ae78366bfaad9fe1233f\",\r\n    measurementId: \"G-02NNXWCWNM\"\r\n  };\r\n  \r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, { useState, useEffect }from 'react';\nimport Video from './Video';\nimport './App.css';\nimport db from \"./firebase\";\n\nfunction App() {\n  const [videos, setVideos] = useState ([]);\n\n  useEffect(() => {\n    db.collection(\"videos\").onSnapshot((snapshot) =>\n      setVideos(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  return (\n    // BEM\n    <div className=\"app\">\n      <div className=\"app__videos\">\n\n      {videos.map(({url, channel, description, song, likes, messages, shares}) => (\n        <Video \n        url={url}\n        channel={channel}\n        song={song}\n        likes={likes}\n        messages={messages}\n        description={description}\n        shares={shares}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}